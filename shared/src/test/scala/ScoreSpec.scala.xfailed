

import org.scalatest._

import shared.Board
import shared.Board._
import shared.Move
import shared.Scorer


class ScoreSpec extends FlatSpec with Matchers {
  "The score" should "be correct (I)" in {
    val board = new Board(5, komi=0)
    board.placeStones(BLACK, List("C1", "C2", "C3", "C4", "C5"))
    board.placeStones(WHITE, List("B1", "B2", "B3", "B4", "B5"))
    /*
         A B C D E
       5 ┌─○─●─┬─┐  5
       4 ├─○─●─┼─┤  4
       3 ├─○─●─┼─┤  3
       2 ├─○─●─┼─┤  2
       1 └─○─●─┴─┘  1
         A B C D E
    */

    board.getScore should be (5)
  }

  "The score" should "be correct (II)" in {
    val board = new Board(5, komi=5.5)
    board.placeStones(BLACK, List("C1", "C2", "C3", "C4", "C5", "D2", "E2"))
    board.placeStones(WHITE, List("B1", "B2", "B3", "B4", "B5", "A2"))
    /*
         A B C D E
       5 ┌─○─●─┬─┐  5
       4 ├─○─●─┼─┤  4
       3 ├─○─●─┼─┤  3
       2 ○─○─●─●─●  2
       1 └─○─●─┴─┘  1
         A B C D E
    */

    board.getScore should be (-1.5)
  }
}


class IsAliveSpec extends FlatSpec with Matchers {
  /*
     A B C D E
   5 ┌─○─┬─●─┐  5
   4 ○─○─●─●─┤  4
   3 ├─○─●─┼─┤  3
   2 ├─○─●─┼─┤  2
   1 └─○─●─┴─┘  1
     A B C D E
  */
  "The groups" should "have the correct amount of neighbour territories" in {
    val board = new Board(5, komi=0)
    board.placeStones(Board.BLACK, List("C1", "C2", "C3", "C4", "D4", "D5"))
    board.placeStones(Board.WHITE, List("B1", "B2", "B3", "B4", "B5", "A4"))

    board.getTerritories("B5").size should be (3)
    board.getTerritories("B2").size should be (3)
    board.getTerritories("D5").size should be (2)
    board.getTerritories("C1").size should be (2)
  }
}


class GroupIsAliveSpec extends FlatSpec with Matchers {

  "The living groups" should "be detected" in {
    /*
       A B C D E F G
     7 ┌─○─●─●─●─┬─●  7
     6 ○─┼─○─┼─●─●─┤  6
     5 ○─○─○─○─●─●─●  5
     4 ○─●─●─●─○─┼─┤  4
     3 ○─●─┼─●─○─○─○  3
     2 ●─┼─●─○─○─┼─○  2
     1 ●─●─●─●─┴─○─┘  1
       A B C D E F G
    */
    val b = new Board(7)
    val blackStones =
      List("A2", "A1", "B1", "C1", "C2") ++
      List("B3", "B4", "C4", "D4", "D3") ++
      List("E7", "E6", "F6", "F5", "G5", "G7") ++
      List("D7", "C7", "E5", "D1")
    val whiteStones =
      List("A6", "A5", "B5", "C5", "C6", "B7") ++
      List("E2", "E3", "F3", "G3", "G2", "F1") ++
      List("D2", "A4", "A3", "D5", "E4")
    b.placeStones(Board.BLACK, blackStones)
    b.placeStones(Board.WHITE, whiteStones)
    val s = new Scorer(b)

    s.groupIsAlive("B7") should be (true)
    s.groupIsAlive("A6") should be (true)
    s.groupIsAlive("E4") should be (true)
    s.groupIsAlive("F1") should be (true)
    s.groupIsAlive("E7") should be (true)
    s.groupIsAlive("G7") should be (true)
    s.groupIsAlive("B4") should be (true)
    s.groupIsAlive("C1") should be (true)
  }

  "The living groups" should "be detected II" in {
    /*
       A B C D E F G
     7 ┌─┬─┬─┬─┬─┬─┐  7
     6 ●─●─●─●─●─●─●  6
     5 ○─○─○─●─○─○─○  5
     4 ├─○─┼─○─┼─○─┤  4
     3 ○─○─○─●─○─○─○  3
     2 ●─●─●─●─●─●─●  2
     1 └─┴─┴─┴─┴─┴─┘  1
       A B C D E F G
    */
    val b = new Board(7)
    val blackStones =
      List("A2", "B2", "C2", "D2", "E2", "F2", "G2") ++
      List("D3", "D5") ++
      List("A6", "B6", "C6", "D6", "E6", "F6", "G6")
    val whiteStones =
      List("A3", "B3", "C3", "E3", "F3", "G3") ++
      List("B4", "D4", "F4") ++
      List("A5", "B5", "C5", "E5", "F5", "G5")
    b.placeStones(Board.BLACK, blackStones)
    b.placeStones(Board.WHITE, whiteStones)
    val s = new Scorer(b)

    s.groupIsAlive("B4") should be (true)
    s.groupIsAlive("D4") should be (true)
    s.groupIsAlive("F4") should be (true)
    // TODO: add negatives
  }
}
